openapi: 3.0.0
info:
  description: SBE Prototyping Backend
  version: 1.0.0
  title: Human-in-the-Loop AB-BPM
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /batch-policy:
    post:
      summary: Set a new batch policy
      description: This endpoint will assign a new batch policy to the currently active process in the process db table.
      tags:
        - Batch Policy
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                batchSize:
                  type: integer
                executionStrategy:
                  type: array
                  items:
                    type: object
                    properties:
                      customerCategory:
                        type: string
                      explorationProbabilityA:
                        type: number
                      explorationProbabilityB:
                        type: number
      responses:
        '200':
          description: Success
  /batch-policy/latest:
    get:
      summary: Get the latest batch policy
      description: >
        Get the latest (so the currently active) batch policy of the currently active process
      tags:
        - Batch Policy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastModified:
                    type: string
                  batchSize:
                    type: integer
                  processDefinitionIdA:
                    type: string
                  processDefinitionIdB:
                    type: string
                  executionStrategy:
                    type: array
                    items:
                      type: object
                      properties:
                        customerCategory:
                          type: string
                        explorationProbabilityA:
                          type: number
                        explorationProbabilityB:
                          type: number
  /batch-policy/count:
    get:
      summary: Get the amount of Batch Policies in the db for a certain process.
      tags:
        - Batch Policy
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  processId:
                    type: integer
                    example: 23
                  batchPolicyCount:
                    type: integer
                    example: 3
  /process/{process_name}:
    post:
      summary: Add a new process with two variants.
      description: >
        They are deployed to camunda automagically.
      tags:
        - Process
      parameters:
        - name: process_name
          in: path
          description: Process Name
          required: true
          schema:
            type: string
        - name: default-version
          in: query
          description: Either 'a' or 'b', used to determine which version to use in between batches.
          schema:
            type: string
        - name: customer-categories
          in: query
          description: Which customer categories exist for that process (the different contexts of the contextual bandit). Format with dash separator ('-', e.g. 'public-gov')
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                variantA:
                  type: string
                  format: binary
                variantB:
                  type: string
                  format: binary
                defaultHistory:
                  type: string
                  format: binary
      responses:
        200:
          description: Success
        400:
          # TODO improve these with more details and the options?
          description: Client error
        500:
          description: Server error
  /process/count:
    get:
      summary: Get amount of processes deployed via our backend.
      tags:
        - Process
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  processesCount:
                    type: integer
  /process/active/meta:
    get:
      summary: Get metadata about currently active process.
      tags:
        - Process
      description: >
        id is the id in our backend, not in the camunda engine.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  addedTime:
                    type: string
                  customer_categories:
                    type: string
                  datetime_added:
                    type: string
                  default_version:
                    type: string
                  experiment_state:
                    type: string
                  default_interarrival_time_history:
                    type: number
                    description: Avg. seconds between starts of new instances in process history of default version, from data submitted by user
                  winning_versions:
                    type: array
                    items:
                      type: object
                      properties:
                        customer_category:
                          type: string
                        winning_version:
                          type: string
                  winning_reason:
                    type: string
                  datetime_decided:
                    type: string
                  number_batch_policies:
                    type: integer
                  number_instances:
                    type: integer
                    description: Number of instances routed for that process. In and outside of batches, and even after winning version.
  /process/variant-file/{a_or_b}:
    get:
      summary: Get the bpmn file of a certain process.
      description: >
        You can get the relevant currently active process id via
        this api call: /process/active/meta
      tags:
        - Process
      parameters:
        - name: a_or_b
          in: path
          description: Enter a or b, to get the specified version of the process
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          # TODO improve this so file can be downloaded from swagger UI
          description: OK, bpmn file is downloaded
        400:
          description: Client error
        404:
          description: No process with that id
        500:
          description: Server error
  /instance-router/start-instance:
    get:
      summary: Start a new instance of a certain process.
      tags:
        - Instance Router
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
        - name: customer-category
          in: query
          description: Specify which customer category the instantiation request belongs to
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        500:
          description: server error
  /instance-router/aggregate-data:
    get:
      summary: Get aggregate data of past instances of a certain process (! only of the instances routed in batch)
      tags:
        - Instance Router
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
        500:
          description: server error
  /instance-router/aggregate-data/client-requests:
    get:
      summary: Get a time overview of client requests and where they have been routed to (! only of the instances routed in batch)
      tags:
        - Instance Router
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  noTotalRequests:
                    type: integer
                    example: 3
                    description: Total number of requests that have been made to backend for this process.
                  requestsA:
                    type: array
                    items:
                      type: integer
                    example: [ 1, 1, 2 ]
                    description:
                      Array of how many requests have been routed to A. Index of array is number of total requests at
                      that point and value at index is how many instances have been routed to A at that point.
                  requestsB:
                    type: array
                    items:
                      type: integer
                    example: [ 0, 1, 1 ]
                    description:
                      Array of how many requests have been routed to B. Index of array is number of total requests at
                      that point and value at index is how many instances have been routed to B at that point.
        500:
          description: server error
        400:
          description: client error
  /instance-router/aggregate-data/evaluation-progress:
    get:
      summary:
        Get overview over how many of the experimental instances have already ben evaluated (experimental instance = 
        instance that has been started as part of a batch)
      tags:
        - Instance Router
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalToBeEvaluatedCount:
                    type: integer
                    example: 10
                  alreadyEvaluatedCount:
                    type: integer
                    example: 6
                  notYetEvaluatedCount:
                    type: integer
                    example: 4
                  alreadyEvaluatedPerc:
                    type: number
                    example: 0.6
                  notYetEvaluatedPerc:
                    type: number
                    example: 0.4
        500:
          description: server error
        400:
          description: client error
  /process/active/manual-decision:
    post:
      summary: Allows human expert to manually make a decision (whether to use version A or B from now on, for ALL customer categories!)
      tags:
        - Process
      parameters:
        - name: version-decision
          in: query
          description: a or b
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        500:
          description: server error
        400:
          description: client error
  /process/active/trigger-fetch-learn:
    post:
      summary: Manually trigger fetching of process instance data from process engine and learning with that data
      tags:
        - Process
      responses:
        200:
          description: OK
        409:
          description:
            conflict; Not possible in current process state (only possible when "running outside batch" or 
            "in cool-off, waiting for experimental instances to finish")
        500:
          description: server error
  /instance-router/finished-instance-count:
    get:
      summary: Get count of instances that have been registered as finished in our system
      tags:
        - Instance Router
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  finishedInstanceCount:
                    type: integer
                    example: 23
        500:
          description: server error
        400:
          description: client error
  /instance-router/detailed-data/batch:
    get:
      summary: Get a more detailed list of all the instances that have been created as part of a batch.
      tags:
        - Instance Router
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
        - name: batch-number
          in: query
          description: Specify which batch. 1 would mean the first batch set for that process and so on.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  processId:
                    type: integer
                    required: true
                    example: 12
                  batchNumber:
                    type: integer
                    required: true
                    example: 2
                  instances:
                    type: array
                    items:
                      type: object
                      properties:
                        decision:
                          type: string
                          description: a or b
                        customerCategory:
                          type: string
                          example: public
                        startTime:
                          type: string
                        endTime:
                          type: string
                        reward:
                          type: number
                        rlProb:
                          type: number
                          description: Probability with which the agent would have chosen the action (decision) given customer_category
        500:
          description: server error
        400:
          description: client error
  /batch-policy-proposal/open:
    get:
      summary: check if there is an open batch policy proposal from the RL agent and if yes, retrieve it
      tags:
        - Batch Policy Proposal
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  newProposalExists:
                    type: boolean
                    example: true
                  proposal:
                    type: object
                    properties:
                      processId:
                        type: integer
                      baPolId:
                        type: integer
                      executionStrategy:
                        type: array
                        items:
                          type: object
                          properties:
                            customerCategory:
                              type: string
                            explorationProbabilityA:
                              type: number
                            explorationProbabilityB:
                              type: number
                required:
                  - newProposalExists
        500:
          description: server error
        400:
          description: client error
  /meta/all:
    delete:
      summary: Empty database and delete stored state on filesystem
      tags:
        - Meta
      responses:
        200:
          description: OK
        500:
          description: server error
        400:
          description: client error
  /batch-policy-proposal/final:
    get:
      summary: check if the final batch batch policy proposal from the RL agent is ready and if yes, retrieve it
      tags:
        - Batch Policy Proposal
      parameters:
        - name: process-id
          in: query
          description: Specify which process you mean by the process id of our backend.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  processId:
                    type: integer
                  baPolId:
                    type: integer
                  executionStrategy:
                    type: array
                    items:
                      type: object
                      properties:
                        customerCategory:
                          type: string
                        explorationProbabilityA:
                          type: number
                        explorationProbabilityB:
                          type: number
        500:
          description: server error
        400:
          description: client error
        404:
          description: no final proposal available
  /process/active/cool-off:
    post:
      summary: Start cool-off period; can only be started after one finished batch.
      tags:
        - Process
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  experimentState:
                    type: string
        404:
          description: No bapol has been finished yet. The cool-off period can only be started after at least one finished bapol
        500:
          description: e.g. Unexpected finished bapol count < 0
  /process/active/winning:
    post:
      summary: Set a winning version; only available if in cool-off and all instances have been evaluates ('cool-off-over')
      tags:
        - Process
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                decision:
                  type: array
                  items:
                    type: object
                    properties:
                      customer_category:
                        type: string
                      winning_version:
                        type: number
                        description: a or b
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  experiment_state:
                    type: string
        404:
          description: No active process that has a finished cool off period available
        400:
          description: e.g. winning-version has to be 'a' or 'b'






